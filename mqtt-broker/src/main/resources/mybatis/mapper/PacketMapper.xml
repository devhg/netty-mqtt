<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.sdutcs.mqtt.broker.web.dao.PacketMapper">

    <resultMap id="userMap" type="cn.sdutcs.mqtt.common.record.Packet">
        <id column="packet_id" property="packetId" jdbcType="BIGINT"/>
        <result column="packet_type" property="packetType" jdbcType="VARCHAR"/>
        <result column="client_id" property="clientId" jdbcType="VARCHAR"/>
        <result column="topic" property="topic" jdbcType="VARCHAR"/>
        <result column="packet_info" property="packetInfo" jdbcType="VARCHAR"/>
        <result column="qos" property="qos" jdbcType="VARCHAR"/>
        <result column="create_time" property="createTime" javaType="DATE"/>
    </resultMap>

    <insert id="insertPacket" parameterType="cn.sdutcs.mqtt.common.record.Packet">
        insert into packet_info(packet_type, client_id, topic, packet_info, qos)
        values (#{packetType}, #{clientId}, #{topic}, #{packetInfo}, #{qos})
    </insert>

    <select id="fetchAllPackets" resultMap="userMap">
        select *
        from packet_info
        <where>
            <if test="clientId != null">
                and client_id = #{clientId}
            </if>
            <if test="fromTime != null">
                and create_time between #{fromTime} and #{toTime}
            </if>
        </where>
        order by create_time desc, packet_id limit #{limit} offset #{offset}
    </select>

    <select id="getPacketsTotal" resultType="java.lang.Integer">
        select count(1) as cnt
        from packet_info
        <where>
            <if test="clientId != null">
                and client_id = #{clientId}
            </if>
            <if test="fromTime != null">
                and create_time between #{fromTime} and #{toTime}
            </if>
        </where>
    </select>

    <select id="getPacketsSumPerSecond" resultType="java.util.HashMap">
        select count(1) as y
        from packet_info
        where create_time between #{fromTime} and #{toTime}
    </select>
</mapper>
